from flask import Flask, request, jsonify, render_template
from flask import send_from_directory
import os
from openai import AzureOpenAI
from dotenv import load_dotenv
load_dotenv()

# Load the Azure OpenAI API key from the environment variables
client = AzureOpenAI(
  azure_endpoint = "https://escola42.openai.azure.com/", 
  api_key=os.getenv("AZURE_OPENAI_API_KEY"),  
  api_version="2024-02-15-preview"
)

# https://escola42.openai.azure.com/openai/deployments/london_is_best/completions?api-version=2024-02-15-preview

CHAT_COMPLETIONS_MODEL = os.getenv('CHAT_COMPLETION_NAME')
SEED=123
OUTPUT_FOLDER = './out'
PROMPT_FOLDER = './prompts'
SYSTEM_MESSAGE = 'system_message_html.txt'
SYSTEM_MESSAGE_AMEND = 'system_message_amend.txt'
STATIC_FOLDER = './static'
TEST_CASE_RESULT_PAGE = 'result.html'

# Load the system message from the file
with open(PROMPT_FOLDER + '/' + SYSTEM_MESSAGE, 'r') as file:
	system_message = file.read()

messages = [{"role":"system","content": system_message}]

app = Flask(__name__)

"""
Endpoint to generate test cases from user story
Method: POST
Parameters:	user_story: string or file
Returns:	test_cases: string
"""
@app.route('/generate_tests', methods=['POST'])
def generate_test_cases():

	print('ARGUMENTS: ', request.args)
	print('FILES: ', request.files)

	user_story = ''

	# Check if the request contains a file
	if 'file' in request.files:
		file = request.files['file']
		user_story = file.read().decode('utf-8')
		print('GOT FILE')
	else:
		# Read plain text from request
		user_story = request.form.get('text')
		print('GOT TEXT')

	#Remove every &nbsp; from the user story
	user_story = user_story.replace('&nbsp;', ' ')

	messages.append({"role":"user","content": user_story})

	# Call the Azure OpenAI API to generate test cases
	response = client.chat.completions.create(
	model="london_is_best",
		messages = messages,
		temperature=0.5,
		max_tokens=4096,
		top_p=0.95,
		frequency_penalty=0,
		presence_penalty=0,
		stop=None
	)

	# Extracting generated test cases from the completion
	test_cases = response.choices[0].message.content
	data = jsonify({"test_cases": test_cases})

	messages.append({"role":"system", "content": test_cases})

	# write test_cases in a file
	with open(OUTPUT_FOLDER + '/test_cases.txt', 'w') as file:
		file.write(test_cases)

	# Read the HTML template file
	with open(STATIC_FOLDER + '/' + TEST_CASE_RESULT_PAGE, 'r') as file:
		html_template = file.read()
	
	# Inject the generated test cases into the HTML template
	html_content = html_template.replace('<!-- test_cases_placeholder -->', test_cases)

	# Returns the test cases generated by the model
	return html_content


"""
Endpoint to amend test cases using alreadt generated test cases and a user message
Method: POST
Parameters:	message: string
Returns:	test_cases: string
"""
@app.route('/amend_tests', methods=['POST'])
def amend_test_cases():
	print('MESSAGES:', messages)
	message = request.form.get('amended_text')
	print('Message:', message)

	system_message = ''

	with open(PROMPT_FOLDER + '/' + SYSTEM_MESSAGE_AMEND, 'r') as file:
		system_message = file.read()

	messages.append({"role":"user","content": system_message + "'" + message + "'"})

	print('MESSAGES:', messages)

	response = client.chat.completions.create(
		model="london_is_best",
		messages = messages,
		temperature=0.5,
		max_tokens=4096,
		top_p=0.95,
		frequency_penalty=0,
		presence_penalty=0,
		stop=None
	)

	# Extracting generated test cases from the completion
	test_cases = response.choices[0].message.content
	data = jsonify({"test_cases": test_cases})

	messages.append({"role":"system", "content": test_cases})

	# write test_cases in a file
	with open(OUTPUT_FOLDER + '/test_cases.txt', 'w') as file:
		file.write(test_cases)

		# Read the HTML template file
	with open(STATIC_FOLDER + '/' + TEST_CASE_RESULT_PAGE, 'r') as file:
		html_template = file.read()
	
	# Inject the generated test cases into the HTML template
	html_content = html_template.replace('<!-- test_cases_placeholder -->', test_cases)

	# Returns the test cases generated by the model
	return html_content

"""
Endpoint to clear all messages
Method: POST
Parameters:	None
Returns:	None
"""
@app.route('/clear_messages', methods=['POST'])
def clear_messages():
	global messages
	messages = [{"role":"system", "content": system_message}]
	print('MESSAGES CLEARED')
	print('Messages:', messages)
	return jsonify({"message": "Messages cleared"})


"""
Endpoint to return index.html
Parameters:	None
Returns:	index.html
"""
@app.route('/index.html', methods=['GET'])
def get_index():
	return send_from_directory('static', 'index.html')

if __name__ == '__main__':
	app.run(debug=True)
